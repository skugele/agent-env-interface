#!python
import os, subprocess

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", 'windows', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'", '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'bin/'))
opts.Add(PathVariable('target_name', 'The library name.', 'libroscomm', PathVariable.PathAccept))

# Local dependency paths, adapt them to your setup
gdnative_cpp_path = "../../godot-cpp/"
gdnative_cpp_library = "libgodot-cpp"

ros_path = "C:/opt/ros/noetic/x64/"
ros_headers_path = "C:/opt/ros/noetic/x64/include/"
ros_library_path = ""

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit();

# Check our platform specifics
if env['platform'] == "osx":
    env['target_path'] += 'osx/'
    gdnative_cpp_library += '.osx'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-g','-O2', '-arch', 'x86_64', '-std=c++17'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64'])
    else:
        env.Append(CCFLAGS = ['-g','-O3', '-arch', 'x86_64', '-std=c++17'])
        env.Append(LINKFLAGS = ['-arch', 'x86_64'])

elif env['platform'] in ('x11', 'linux'):
    env['target_path'] += 'x11/'
    gdnative_cpp_library += '.linux'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-fPIC', '-g3','-Og', '-std=c++17'])
    else:
        env.Append(CCFLAGS = ['-fPIC', '-g','-O3', '-std=c++17'])

# default to windows
elif env['platform'] == "windows":
    env['target_path'] += 'win64/'
    gdnative_cpp_library += '.windows'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV = os.environ)

    env.Append(CCFLAGS = ['-DWIN32', '-D_WIN32', '-D_WINDOWS', '-W3', '-GR', '-D_CRT_SECURE_NO_WARNINGS'])
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS = ['-EHsc', '-D_DEBUG', '-MDd'])
    else:
        env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '-MD'])

if env['target'] in ('debug', 'd'):
    gdnative_cpp_library += '.debug'
else:
    gdnative_cpp_library += '.release'

gdnative_cpp_library += '.' + str(bits)

# make sure our binding library is properly includes

CPPPATH = [
    # project headers
    './include/', 
    
    # gdnative cpp headers
    gdnative_cpp_path + 'godot_headers/', 
    gdnative_cpp_path + 'include/', 
    gdnative_cpp_path + 'include/core/', 
    gdnative_cpp_path + 'include/gen/',
    
    # ROS headers
    ros_headers_path
]

LIBPATH = [
    # gdnative cpp lib path
    gdnative_cpp_path + 'bin/',
    
    # ROS lib path
    ros_path + 'Lib/'
]

LIBS = [
    # gdnative cpp libs
    gdnative_cpp_library,
    
    # ros libs
    "roscpp.lib",
    #"boost_filesystem-vc140-mt.lib",
    "rosconsole.lib",
    #"rosconsole_log4cxx.lib",
    #"rosconsole_backend_interface.lib",
    #"log4cxx.lib",
    #"boost_regex-vc140-mt.lib",
    #"xmlrpcpp.lib",
    "roscpp_serialization.lib",
    "rostime.lib",
    #"cpp_common.lib",
    #"boost_system-vc140-mt.lib",
    #"boost_thread-vc140-mt.lib",
    #"boost_chrono-vc140-mt.lib",
    #"boost_date_time-vc140-mt.lib",
    #"boost_atomic-vc140-mt.lib",
    #"console_bridge.lib",
    #"kernel32.lib",
    #"user32.lib",
    #"gdi32.lib",
    #"winspool.lib",
    #"shell32.lib",
    #"ole32.lib",
    #"oleaut32.lib",
    #"uuid.lib",
    #"comdlg32.lib",
    #"advapi32.lib",
]

CPPDEFINES = [
    "ROS_BUILD_SHARED_LIBS=1",
    "_USE_MATH_DEFINES",
    "WIN32",
    "_WINDOWS",
    "WIN32_LEAN_AND_MEAN",
    "NOMINMAX"
]

# add ROS libs
# roslibs=Glob(ros_path + 'Lib/*.lib')
# LIBS.append(roslibs)

env.Append(CPPPATH=CPPPATH)
env.Append(LIBPATH=LIBPATH)
env.Append(LIBS=LIBS)
env.Append(CPPDEFINES=CPPDEFINES)

# tweak this if you want to use different folders, or more folders, to store your source code in.
# env.Append(CPPPATH=['.'])
sources = Glob('src/*.cpp')

library = env.SharedLibrary(target=env['target_path'] + env['target_name'] , source=sources)
#library = env.Library(target=env['target_path'] + env['target_name'] , source=sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
